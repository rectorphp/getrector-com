<?php

declare(strict_types=1);

namespace Rector\Website\Enum;

final class NodeTypeToHumanReadable
{
    /**
     * @var array<class-string<\PhpParser\Node>, string>
     */
    public const MAP = [
        \PhpParser\Node\Stmt\Class_::class => 'class',
        \PhpParser\Node\Stmt\ClassMethod::class => 'class method',
        \PhpParser\Node\Expr\MethodCall::class => 'method call',
        \PhpParser\Node\Expr\FuncCall::class => 'function call',
        \PhpParser\Node\Expr\StaticCall::class => 'static call',
        \PhpParser\Node\Stmt\Function_::class => 'function',
        \PhpParser\Node\Expr\Closure::class => 'closure',
        \Rector\Contract\PhpParser\Node\StmtsAwareInterface::class => 'statements',
        \PhpParser\Node\Stmt\Property::class => 'property',
        \PhpParser\Node\Stmt\If_::class => 'if',
        \PhpParser\Node\Expr\Ternary::class => 'ternary',
        \PhpParser\Node\Stmt\Expression::class => 'expression',
        \PhpParser\Node\Expr\BinaryOp\Identical::class => '===',
        \PhpParser\Node\Expr\BooleanNot::class => 'boolean not',
        \PhpParser\Node\Expr\New_::class => 'new instance',
        \PhpParser\Node\Expr\Assign::class => 'assignment',
        \PhpParser\Node\Stmt\Foreach_::class => 'foreach statement',
        \PhpParser\Node\Scalar\String_::class => 'string',
        \PhpParser\Node\Expr\ArrowFunction::class => 'arrow function',
        \PhpParser\Node\Stmt\ClassConst::class => 'class constant',
        \PhpParser\Node\Expr\BinaryOp\NotIdentical::class => '!==',
        \Rector\PhpParser\Node\CustomNode\FileWithoutNamespace::class => 'files without namespace',
        \PhpParser\Node\Stmt\Switch_::class => 'switch',
        \PhpParser\Node\Stmt\Namespace_::class => 'namespace',
        \PhpParser\Node\Stmt\Interface_::class => 'interface',
        \PhpParser\Node\Param::class => 'parameter',
        \PhpParser\Node\Stmt\ClassLike::class => 'class-like statements',
        \PhpParser\Node\Expr\BinaryOp\NotEqual::class => '!=',
        \PhpParser\Node\Stmt\While_::class => 'while statement',
        \PhpParser\Node\Expr\BinaryOp\BooleanAnd::class => '&&',
        \PhpParser\Node\Stmt\For_::class => 'for statement',
        \PhpParser\Node\Expr\Array_::class => 'array',
        \PhpParser\Node\Expr\BinaryOp\Equal::class => 'equal binary operation',
        \PhpParser\Node\Expr\ConstFetch::class => 'constant fetch',
        \PhpParser\Node\Stmt\Do_::class => 'do statement',
        \PhpParser\Node\Expr\Empty_::class => 'empty expression',
        \PhpParser\Node\Expr\BinaryOp\BooleanOr::class => 'boolean or operation',
        \PhpParser\Node\Stmt\ElseIf_::class => 'elseif statement',
        \PhpParser\Node\Scalar\Encapsed::class => 'encapsed string',
        \PhpParser\Node\Expr\Variable::class => 'variable',
        \PhpParser\Node\Stmt\Break_::class => 'break statement',
        \PhpParser\Node\Expr\PropertyFetch::class => 'property fetch',
        \PhpParser\Node\FunctionLike::class => 'function-like',
        \PhpParser\Node\Expr\ClassConstFetch::class => 'class constant fetch',
        \PhpParser\Node\Expr\NullsafeMethodCall::class => 'nullsafe method call',
        \PhpParser\Node\Expr\BinaryOp\Concat::class => 'concatenation binary operation',
        \PhpParser\Node\Expr\AssignOp\Plus::class => 'assignment plus operation',
        \PhpParser\Node\Expr\AssignOp\Minus::class => 'assignment minus operation',
        \PhpParser\Node\Stmt\TryCatch::class => 'try-catch statement',
        \PhpParser\Node\Expr\ArrayDimFetch::class => 'array dimension fetch',
        \PhpParser\Node\Expr\BinaryOp::class => 'binary operation',
        \PhpParser\Node\Expr\StaticPropertyFetch::class => 'static property fetch',
        \PhpParser\Node\Expr\List_::class => 'list',
        \PhpParser\Node\Expr\Cast\Unset_::class => 'unset cast',
        \PhpParser\Node\Name\FullyQualified::class => 'fully qualified name',
        \PhpParser\Node\Expr\BinaryOp\Plus::class => '+',
        \PhpParser\Node\Expr\BinaryOp\Minus::class => '-',
        \PhpParser\Node\Expr\BinaryOp\Mul::class => '*',
        \PhpParser\Node\Expr\BinaryOp\Div::class => '/',
        \PhpParser\Node\Expr\AssignOp\Mul::class => '=*',
        \PhpParser\Node\Expr\AssignOp\Div::class => '=/',
        \PhpParser\Node\Expr\Cast::class => 'cast',
        \PhpParser\Node\Stmt\Trait_::class => 'trait',
        \PhpParser\Node\Scalar\LNumber::class => 'integer literal',
        \PhpParser\Node\Scalar\DNumber::class => 'float literal',
        \PhpParser\Node\Expr\Cast\Double::class => 'double cast',
        \PhpParser\Node\Stmt\Catch_::class => 'catch statement',
        \PhpParser\Node\Stmt\Else_::class => 'else statement',
        \PhpParser\Node\Expr\Isset_::class => 'isset expression',
        \PhpParser\Node\Expr\Include_::class => 'include expression',
        \PhpParser\Node\Expr\BinaryOp\LogicalOr::class => 'logical or operation',
        \PhpParser\Node\Expr\BinaryOp\LogicalAnd::class => 'logical and operation',
        \PhpParser\Node\Expr\ArrayItem::class => 'array item',
        \PhpParser\Node\Arg::class => 'argument',
        \PhpParser\Node\Stmt\Continue_::class => 'continue statement',
        \PhpParser\Node\Scalar\MagicConst\Class_::class => 'class magic constant',
        \PhpParser\Node\Expr\BinaryOp\Greater::class => 'greater than binary operation',
        \PhpParser\Node\Expr\BinaryOp\Smaller::class => 'less than binary operation',
    ];
}
