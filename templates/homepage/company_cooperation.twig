{% extends "base.twig" %}

{% block main %}
    <div id="for-companies">
        <h1 class="main-title">
            {{ title }}
        </h1>

        <p class="text-bigger">
            We look for clients who want to build a long-term relationship. Quick changes can quickly backfire, slow gradual small steps lead to long-term success.
            <br>
            <br>
            That means we take on projects for 6-18 months and help clients to get to the latest version of PHP framework, and making the CI super strong and helpful at first. When our job is finished, they don't need us ever again.
        </p>

        <br>

        <h2>1. Intro Analysis</h2>

        <p>
            Before we get into migration/upgrade itself, we have to make sure we know we can really help you. Also, we have to know about all the weak spots that will get the process complicated. You would not buy a house without checking its foundation, right?
        </p>

        <p>
            We signed an NDA first, so your code is safe with us. Then you share your codebase with us, ideally in a git repository URL.
        </p>

        <p>The process of intro analysis is combination of tools, past experience with other project upgrades and detective work. We've done over 30 project upgrade so far and every intro analysis was different. To give you a rough idea, we look at a few metrics:</p>

        <ul>
            <li>Size of the project and its complexity - OOP, classes vs. function, cognitive complexity, and other hard data</li>
            <li>We look for/try tooling that takes care of the code quality in the long term - PHPStan, coding standard, Rector, used sets, levels, and extensions - the higher quality, the better.</li>
            <li>We look possible black holes - we have a list of known black holes that can easily delay the upgrade by months; we look for those</li>
            <li>We provide list of suggested first steps and low-hanging fruit</li>
        </ul>

        <p>
            The analysis is done without any know-how input from your side. The reason is simple: developers who take care of code base for years can get used-to complicated patterns. These patterns made the legacy in the first place. We have to identify those and get rid of them, or in a year you have the same legacy like before. Another bias we want to avoid is selling the project's strong parts and not focusing on the weak ones.
        </p>

        <p>
            E.g. in one project, the team leader said "to be honest, we have very high code quality, but always look for a space to improve". That sounds like a codebase, everyone would like to work with, right? In the intro analysis, we found out there are exactly 2 tests in the whole project.
        </p>

        <p>
            We have to know them before we start. Otherwise, we might waste a few months of work in the wrong direction. We have to find them, spot them, talk about them, and find the best way to deal with them. It's like going to a doctor that tells you bad news. It's hard, and no person wants to hear it, but we can only face it and deal with it.
        </p>

        <p>
            This analysis takes us 3 weeks. After that, we will share the analysis with you and have a call around the results. On the call, we organize the next steps to start with.
        </p>

        <p>
            Some companies ask us only for the analysis audit, because they want to know where the weak parts are. Then they delegate the steps to improve to their team and check with us in a year again.
        </p>

        <hr>

        <h2>2. Hands on Upgrade</h2>

        <p>
                After the call, we can start with the mentoring and upgrade work.
        </p>

        <p>
            Our team provides 10-20 hours/week of direct help. This means we'll dedicate you to a developer who has experience with Rector in legacy code bases and knows how to deal with complex problems.
        </p>

        <br>
        <br>
        <br>
        <br>
        <br>
    </div>
{% endblock %}
